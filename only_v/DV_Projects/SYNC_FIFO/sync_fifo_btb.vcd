$date
	Tue May 21 12:46:06 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module sync_fifo_btb $end
$var wire 8 ! r_data [7:0] $end
$var wire 1 " full $end
$var wire 1 # empty $end
$var parameter 32 $ DEPTH $end
$var parameter 32 % D_WIDTH $end
$var parameter 32 & T $end
$var reg 1 ' clk $end
$var reg 1 ( rd $end
$var reg 1 ) reset $end
$var reg 8 * w_data [7:0] $end
$var reg 1 + wr $end
$scope module fifo1 $end
$var wire 1 ' clk $end
$var wire 1 ( rd $end
$var wire 1 ) reset $end
$var wire 8 , w_data [7:0] $end
$var wire 1 - we $end
$var wire 1 + wr $end
$var wire 3 . w_addr [2:0] $end
$var wire 8 / r_data [7:0] $end
$var wire 3 0 r_addr [2:0] $end
$var wire 1 " full $end
$var wire 1 # empty $end
$var parameter 32 1 DEPTH $end
$var parameter 32 2 D_WIDTH $end
$scope module ctrl1 $end
$var wire 1 ' clk $end
$var wire 1 ( rd $end
$var wire 1 ) reset $end
$var wire 1 - we $end
$var wire 1 + wr $end
$var wire 3 3 w_addr [2:0] $end
$var wire 3 4 r_addr [2:0] $end
$var parameter 32 5 DEPTH $end
$var reg 1 # empty $end
$var reg 1 6 empty_next $end
$var reg 1 " full $end
$var reg 1 7 full_next $end
$var reg 3 8 r_ptr [2:0] $end
$var reg 3 9 r_ptr_next [2:0] $end
$var reg 3 : w_ptr [2:0] $end
$var reg 3 ; w_ptr_next [2:0] $end
$upscope $end
$scope module mem1 $end
$var wire 1 ' clk $end
$var wire 3 < r_addr [2:0] $end
$var wire 8 = r_data [7:0] $end
$var wire 3 > w_addr [2:0] $end
$var wire 8 ? w_data [7:0] $end
$var wire 1 - we $end
$var parameter 32 @ DEPTH $end
$var parameter 32 A D_WIDTH $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1000 A
b1000 @
b1000 5
b1000 2
b1000 1
b1010 &
b1000 %
b1000 $
$end
#0
$dumpvars
bx ?
b0 >
bx =
b0 <
b0 ;
b0 :
b0 9
b0 8
07
16
b0 4
b0 3
b0 0
bx /
b0 .
0-
bx ,
0+
bx *
1)
0(
0'
1#
0"
bx !
$end
#5
1'
#10
1-
06
b1 ;
0)
1+
b101 *
b101 ,
b101 ?
0'
#15
b10 ;
b1 .
b1 3
b1 >
0#
b1 :
b101 !
b101 /
b101 =
1'
#20
0-
b1 ;
0+
0'
#25
1'
#30
1-
b10 ;
1+
b110 *
b110 ,
b110 ?
0'
#35
b11 ;
b10 .
b10 3
b10 >
b10 :
1'
#40
0-
b10 ;
0+
0'
#45
1'
#50
1-
b11 ;
1+
0'
#55
b100 ;
b11 .
b11 3
b11 >
b11 :
1'
#60
0-
b11 ;
0+
0'
#65
1'
#70
1-
b100 ;
1+
0'
#75
b101 ;
b100 .
b100 3
b100 >
b100 :
1'
#80
0-
b100 ;
0+
0'
#85
1'
#90
1-
b101 ;
1+
0'
#95
b110 ;
b101 .
b101 3
b101 >
b101 :
1'
#100
0-
b101 ;
0+
0'
#105
1'
#110
1-
b110 ;
1+
b10 *
b10 ,
b10 ?
0'
#115
b111 ;
b110 .
b110 3
b110 >
b110 :
1'
#120
0-
b110 ;
0+
0'
#125
1'
#130
b1 9
1(
0'
#135
b10 9
b110 !
b110 /
b110 =
b1 0
b1 4
b1 <
b1 8
1'
#140
b1 9
0(
0'
#145
1'
#150
1-
b111 ;
1+
b11 *
b11 ,
b11 ?
0'
#155
b0 ;
b111 .
b111 3
b111 >
b111 :
1'
#160
0-
b111 ;
0+
0'
#165
1'
#170
1-
b0 ;
1+
0'
#175
17
b1 ;
b0 .
b0 3
b0 >
b0 :
1'
#180
0-
07
b0 ;
0+
0'
#185
1'
#190
1-
17
b1 ;
1+
0'
#195
0-
b1 .
b1 3
b1 >
1"
b1 :
1'
#200
0+
0'
#205
1'
#210
1+
0'
#215
1'
#220
0+
0'
#225
1'
#230
0'
